{"mappings":"A,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,SCEA,MAAM,EAAO,SAAS,aAAA,CAAc,kBAC9B,EAAQ,SAAS,aAAA,CAAc,uBAC/B,EAAU,SAAS,aAAA,CAAc,4BACjC,EAAmB,sBAGzB,EAAK,gBAAA,CACH,QACA,AAAA,CAAA,EAAA,EAAA,QAAO,AAAP,EAAS,AAAA,IAEP,IAAM,EAAe,CAAE,MAAO,EAAM,KAAb,CAAoB,QAAS,EAAQ,KAAjB,AAAuB,EAGlE,aAAa,OAAA,CAAQ,EAAkB,KAAK,SAAA,CAAU,GACxD,EAAG,MAIL,EAAK,gBAAA,CAAiB,SAAU,AAAA,IAI9B,GAHA,EAAE,cAAF,GAGI,AAAgB,KAAhB,EAAM,KAAA,EAAgB,AAAkB,KAAlB,EAAQ,KAAA,CAChC,OAAO,MAAM,uBAIf,QAAQ,GAAA,CAAI,CAAE,MAAO,EAAM,KAAb,CAAoB,QAAS,EAAQ,KAAjB,AAAuB,GACzD,EAAK,KAAA,GACL,aAAa,UAAA,CAAW,EAC1B,GAoBA,MAAM,EAAc,AAjBP,CAAA,AAAA,IACX,GAAI,CACF,IAAM,EAAkB,aAAa,OAAA,CAAQ,GAE7C,GAAI,CAAC,EAAiB,OAEtB,OAAO,KAAK,KAAA,CAAM,EACpB,CAAE,MAAO,EAAO,CAEd,QAAQ,KAAA,CAAM,oBAAqB,EAAM,OAAzC,EACA,MACF,CACF,CAAA,EAKyB,GACzB,GAAI,EAAa,CACf,GAAM,CAAE,MAAO,CAAW,CAAE,QAAS,CAAa,CAAE,CAAG,CACvD,CAAA,EAAM,KAAA,CAAQ,EACd,EAAQ,KAAA,CAAQ,CAClB","sources":["<anon>","src/js/03-feedback.js"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar $kEUo3 = parcelRequire(\"kEUo3\");\nconst $945622fd0f572e60$var$form = document.querySelector(\".feedback-form\");\nconst $945622fd0f572e60$var$email = document.querySelector('input[name=\"email\"]');\nconst $945622fd0f572e60$var$message = document.querySelector('textarea[name=\"message\"]');\nconst $945622fd0f572e60$var$LOCALSTORAGE_KEY = \"feedback-form-state\";\n// Додаємо слухача події input до форми\n$945622fd0f572e60$var$form.addEventListener(\"input\", (0, $kEUo3.throttle)((e)=>{\n    // Об'єкт з полями email і message, у яких зберігаються поточні значення полів форми\n    const objectToSave = {\n        email: $945622fd0f572e60$var$email.value,\n        message: $945622fd0f572e60$var$message.value\n    };\n    // Записування у локальне сховище об'єкта з полями.\n    // JSON.stringify - конвертування JS-значень у формат строки JSON.\n    localStorage.setItem($945622fd0f572e60$var$LOCALSTORAGE_KEY, JSON.stringify(objectToSave));\n}, 500));\n//Відправка форми\n$945622fd0f572e60$var$form.addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    // Перевірка чи заповнені всі поля форми\n    if ($945622fd0f572e60$var$email.value === \"\" || $945622fd0f572e60$var$message.value === \"\") return alert(\"Заповніть всі поля!\");\n    // Виведення у консоль об'єкта з полями та їхніми поточними значеннями\n    console.log({\n        email: $945622fd0f572e60$var$email.value,\n        message: $945622fd0f572e60$var$message.value\n    });\n    $945622fd0f572e60$var$form.reset(); // очищення поля форми\n    localStorage.removeItem($945622fd0f572e60$var$LOCALSTORAGE_KEY); // очищення сховища\n});\n// Метод load який буде абстрагувати повторюваний код перевірки помилок парса\nconst $945622fd0f572e60$var$load = (key)=>{\n    try {\n        const serializedState = localStorage.getItem(key);\n        // Перевірка чи дані не порожні, якщо так - повернути undefined\n        if (!serializedState) return undefined;\n        // Розпарсити збережені дані\n        return JSON.parse(serializedState);\n    } catch (error) {\n        // В разі помилки повернути повідомлення\n        console.error(\"Get state error: \", error.message);\n        return undefined;\n    }\n};\n// Перевірка стану сховища.\n// Якщо  в сховищі є збережені дані - заповнити ними поля форми.\nconst $945622fd0f572e60$var$storageData = $945622fd0f572e60$var$load($945622fd0f572e60$var$LOCALSTORAGE_KEY);\nif ($945622fd0f572e60$var$storageData) {\n    const { email: storedEmail, message: storedMessage } = $945622fd0f572e60$var$storageData;\n    $945622fd0f572e60$var$email.value = storedEmail;\n    $945622fd0f572e60$var$message.value = storedMessage;\n}\n\n\n//# sourceMappingURL=03-feedback.4c65dc2e.js.map\n","import { throttle } from 'lodash';\n\nconst form = document.querySelector('.feedback-form');\nconst email = document.querySelector('input[name=\"email\"]');\nconst message = document.querySelector('textarea[name=\"message\"]');\nconst LOCALSTORAGE_KEY = 'feedback-form-state';\n\n// Додаємо слухача події input до форми\nform.addEventListener(\n  'input',\n  throttle(e => {\n    // Об'єкт з полями email і message, у яких зберігаються поточні значення полів форми\n    const objectToSave = { email: email.value, message: message.value };\n    // Записування у локальне сховище об'єкта з полями.\n    // JSON.stringify - конвертування JS-значень у формат строки JSON.\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(objectToSave));\n  }, 500)\n);\n\n//Відправка форми\nform.addEventListener('submit', e => {\n  e.preventDefault();\n\n  // Перевірка чи заповнені всі поля форми\n  if (email.value === '' || message.value === '') {\n    return alert('Заповніть всі поля!');\n  }\n\n  // Виведення у консоль об'єкта з полями та їхніми поточними значеннями\n  console.log({ email: email.value, message: message.value });\n  form.reset(); // очищення поля форми\n  localStorage.removeItem(LOCALSTORAGE_KEY); // очищення сховища\n});\n\n// Метод load який буде абстрагувати повторюваний код перевірки помилок парса\nconst load = key => {\n  try {\n    const serializedState = localStorage.getItem(key);\n    // Перевірка чи дані не порожні, якщо так - повернути undefined\n    if (!serializedState) return undefined;\n    // Розпарсити збережені дані\n    return JSON.parse(serializedState);\n  } catch (error) {\n    // В разі помилки повернути повідомлення\n    console.error('Get state error: ', error.message);\n    return undefined;\n  }\n};\n\n// Перевірка стану сховища.\n// Якщо  в сховищі є збережені дані - заповнити ними поля форми.\n\nconst storageData = load(LOCALSTORAGE_KEY);\nif (storageData) {\n  const { email: storedEmail, message: storedMessage } = storageData;\n  email.value = storedEmail;\n  message.value = storedMessage;\n}"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$kEUo3","$945622fd0f572e60$var$form","document","querySelector","$945622fd0f572e60$var$email","$945622fd0f572e60$var$message","$945622fd0f572e60$var$LOCALSTORAGE_KEY","addEventListener","throttle","e","objectToSave","email","value","message","localStorage","setItem","JSON","stringify","preventDefault","alert","console","log","reset","removeItem","$945622fd0f572e60$var$storageData","$945622fd0f572e60$var$load","key","serializedState","getItem","parse","error","storedEmail","storedMessage"],"version":3,"file":"03-feedback.4c65dc2e.js.map"}